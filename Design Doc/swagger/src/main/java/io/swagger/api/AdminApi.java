/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Attendance;
import io.swagger.model.Student;
import io.swagger.model.Teacher;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-12-15T18:21:33.809Z")

@Api(value = "Admin", description = "the Admin API")
public interface AdminApi {

    @ApiOperation(value = "Add a new student", nickname = "addStudent", notes = "", authorizations = {
        @Authorization(value = "Admin_auth", scopes = {
            @AuthorizationScope(scope = "read:students", description = "Alloow view"),
            @AuthorizationScope(scope = "write:students", description = "Allow edits")
            })
    }, tags={ "Admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/Admin",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addStudent(@ApiParam(value = "Student object that needs to be added" ,required=true )  @Valid @RequestBody Student body);


    @ApiOperation(value = "To generate attendance report", nickname = "attendanceReport", notes = "Returns a Attendance Report", response = Attendance.class, responseContainer = "List", authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "Admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Attendance.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "ID found") })
    @RequestMapping(value = "/Admin/AttensanceReport",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Attendance>> attendanceReport();


    @ApiOperation(value = "Find Student by Name", nickname = "findStudentbyName", notes = "Find student by Name", response = Student.class, responseContainer = "List", authorizations = {
        @Authorization(value = "Admin_auth", scopes = {
            @AuthorizationScope(scope = "read:students", description = "Alloow view"),
            @AuthorizationScope(scope = "write:students", description = "Allow edits")
            })
    }, tags={ "Admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Student.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value") })
    @RequestMapping(value = "/Admin/FindByName{name}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Student>> findStudentbyName(@ApiParam(value = "ID of Teacher to return",required=true) @PathVariable("name") Long name);


    @ApiOperation(value = "Find Teacher by Id", nickname = "getTeacherById", notes = "Returns a single Teacher", response = Teacher.class, authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "Admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Teacher.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "ID found") })
    @RequestMapping(value = "/Admin/{TeacherId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Teacher> getTeacherById(@ApiParam(value = "ID of Teacher to return",required=true) @PathVariable("TeacherId") Long teacherId);


    @ApiOperation(value = "To generate Students detail List", nickname = "studentReport", notes = "Returns a list of all students", response = Student.class, responseContainer = "List", authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "Admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Student.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "ID found") })
    @RequestMapping(value = "/Admin/StudentsDetail",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Student>> studentReport();


    @ApiOperation(value = "Assign Course to student", nickname = "updateStudent", notes = "", authorizations = {
        @Authorization(value = "Admin_auth", scopes = {
            @AuthorizationScope(scope = "read:students", description = "Alloow view"),
            @AuthorizationScope(scope = "write:students", description = "Allow edits")
            })
    }, tags={ "Admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Student not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/Admin",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateStudent(@ApiParam(value = "Student object that needs to be added" ,required=true )  @Valid @RequestBody Student body);

}
